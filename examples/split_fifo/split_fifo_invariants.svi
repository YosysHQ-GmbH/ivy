// One approach to organizing invariants for a design is to group all
// invariants for a specific design module in a helper module of which an
// instance is bound to all instances of the design module.
//
// Invariants, proofs and signals of the design module can then be accessed via
// "upwards name referencing" using hierarchical references that start with the
// bound-to module name.

// We start with the FIFOs of which there are several throughout the design.
module fifo_invariants #(DEPTH_BITS);
    // We can define some derived signals without cluttering the design itself.
    // The FIFO implementation doesn't need to compute the fill level, it works
    // purely on the read and write addresses, but the invariants we're using
    // are defined in terms of the fill level defined by their difference.
    wire [DEPTH_BITS:0] level = fifo.write_addr - fifo.read_addr;

    // We define an invariant that describes the reachable states for the FIFO:
    // The fill level may not be larger than the size of the backing memory
    // used for the FIFO (`1 << DEPTH_BITS`).
    invariant level_max;
        disable iff (fifo.rst)
        level <= 1 << DEPTH_BITS;
    endinvariant

    // For a simple invariant like this we can use a `proof` statement
    // containing a single `assert` item. We mark the `proof` as `automatic` as
    // we want to solve this invariant automatically for each instantiated
    // fifo.
    automatic proof level_max_p;
        assert invariant level_max;
    endproof
endmodule

bind fifo fifo_invariants #(
    .DEPTH_BITS(DEPTH_BITS)
) invs (.*);

// Next we define an invariant for a "lane" which consists of an input FIFO, a
// variable-time multiplier and an output FIFO.
module lane_invariants #(WIDTH, DEPTH_BITS) (
    input clk,
    input rst,
    input in_ready,
    input in_valid,
    input out_ready,
    input out_valid
);
    // Setup the clock used by `$past` within this helper module.
    default clocking def_clk @(posedge clk); endclocking

    // The number of multiplication requests currently in flight for a lane is
    // the number of requests buffered in the input fifo, the number of
    // requests buffered in the output fifo and an additional requests if the
    // multiplier is currently processing a request.
    wire [DEPTH_BITS+2:0] in_flight =
        lane.in_fifo.invs.level
        + lane.out_fifo.invs.level
        + !lane.multiplier.in_ready;

    // We track whether we have an incoming or outgoing transfer.
    wire transfer_in = in_ready && in_valid;
    wire transfer_out = out_ready && out_valid;

    // The number of in flight requests can only change due to an incoming or
    // outgoing transfer. Note that this invariant is only valid when neither
    // the current nor the previous cycle was a reset cycle.
    invariant in_flight_delta;
        disable iff (rst || $past(rst))
        in_flight == $past(in_flight + (transfer_in - transfer_out));
    endinvariant

    // Using k-induction alone, it's not possible to prove this invariant. To
    // make this invariant k-inductive, we can assume the invariants of the
    // input and output FIFOs.
    automatic proof in_flight_delta_p;
        assume invariant lane.in_fifo.invs.level_max;
        assume invariant lane.out_fifo.invs.level_max;

        assert invariant in_flight_delta;
    endproof
endmodule

bind lane lane_invariants #(
    .WIDTH(WIDTH), .DEPTH_BITS(DEPTH_BITS)
) invs (.*);


// Finally we define an invariant for the top level module and use it to proof
// our `progress` property defined as part of the design.
module top_invariants (
    input rst
);
    // For the top-level module we bind a globally active assumption that
    // forces the initial state to be in reset.
    initial assume (rst);


    // An invariant of our design is that both lanes always have the same
    // number of in-flight requests.
    invariant same_in_flight;
        disable iff (rst)
        top.lane[0].invs.in_flight == top.lane[1].invs.in_flight;
    endinvariant

    // To prove this, we use the per-lane invariant that specifies how the
    // number of in-flight requests can change due to incoming and outgoing
    // transfers.
    automatic proof same_in_flight_p;
        // Using `export` in proofs allows grouping multiple invariants so that
        // they can be added as assumptions with a single `use proof` below.
        export assume invariant top.lane[0].invs.in_flight_delta;
        export assume invariant top.lane[1].invs.in_flight_delta;

        export assert invariant same_in_flight;
    endproof

    // With these assumptions, our `progress` properties becomes k-inductive.
    automatic proof progress_p;
        use proof same_in_flight_p;

        // Proofs can directly assert SVA properties.
        assert property top.progress;

        // For an SVA property it's often necessary to use a larger depth than
        // required for most invariants.
        solve with "sby --depth 10";
    endproof

endmodule

bind top top_invariants invs (.*);
